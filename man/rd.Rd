% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rd.R
\name{rd}
\alias{rd}
\title{Read files form a directory by a given function}
\usage{
rd(
  .f,
  path = ".",
  pattern = "\\\\.csv$",
  ...,
  invert = F,
  ignore.case = F,
  perl = F,
  fixed = F,
  all.files = F,
  recursive = F,
  no.. = F,
  snake_case = F
)
}
\arguments{
\item{.f}{A function to read files from a directory. First argument of the function must be file path. Support formula interface.
Example : `utils::read.csv`, `readr::read_csv`, `rio::import`, `readxl::read_excel`, `base::readRDS`}

\item{path}{Character: Path to desired directory which contain file, default is "." working directory. (passed to `base::list.files`)}

\item{pattern}{Character: Specify regular expression to match file extension and file names. (passed to `grep()`) .
Default is to read .csv file "\\.csv$". Please select according to `.f`; Example, use `\\.xlsx$` to read from excel file.}

\item{...}{Argument to pass to `.f`}

\item{invert}{Logical: If `TRUE` read from file that file names do not match `pattern`.(passed to `grep()`)}

\item{ignore.case}{If FALSE, the regular expression matching is case sensitive and if `TRUE`, case is ignored during matching.(passed to `grep()`)}

\item{perl}{Logical: Should Perl-compatible regexps be used? (passed to `grep()`)}

\item{fixed}{Logical: If `TRUE`, pattern is a string to be matched as is. Overrides all conflicting arguments.}

\item{all.files}{If `TRUE` hidden files are also returned. (passed to `base::list.files`)}

\item{recursive}{If `TRUE` read recursively in sub-directory.(passed to `base::list.files`)}

\item{no..}{logical. Should both "." and ".." be excluded also from non-recursive listings? (passed to `base::list.files`)}

\item{snake_case}{If `TRUE`: Convert names to snake_case_format.  (require `snakecase` package)}
}
\value{
list of object returned by `.f`
}
\description{
Read multiple files from a directory using reading engine supply by a function.
}
\examples{
# Not run
if(FALSE){

 # Read .csv file form working directory (default) using `utils::read.csv`.
 ## file names are set to names of each data frame.

   rd(utils::read.csv) # default `pattern` is "\\.csv$"

 # Read .xlsx file from a directory using `readxl::read_excel`.
 ## Must specify regular expression to match file extension.

   read.dir(readxl::read_excel, path = "path/to/dir" ,pattern = "\\\\.xlsx$")

 #  `.f` also accept formula interface.
 # You can specify arguments of `.f` into the formula (similar to `purrr` package style).
 # To read form sub-directory set `recursive = TRUE`.

   rd(~readr::read_csv(.x, col_names = F), snake_case = T, recursive = TRUE)

 # Read files using multiple engine from multiple path and multiple file extension.

   params <- list(.f = c(~read_csv(.x, col_names = F), readxl::read_excel, read.csv),
              path = c("path/to/dir1", "path/to/dir2", "file.csv"),  # `path` can be individual file
             pattern = c("\\\\.csv$", "\\\\.xlsx", "\\\\.csv$"))

   purrr::pmap(params, rd)


}
}
